{"version":3,"sources":["Components/Auth/LoginForm.js","Components/Auth/validateRegisterName.js","Components/Auth/validateRegisterEmail.js","Components/Auth/validateRegisterPassword.js","Components/Auth/RegisterForm.js","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","Fragment","method","htmlFor","type","id","name","for","value","className","validateRegisterName","fullname","console","log","trim","validateRegisterEmail","email","test","validateRegisterPassword","password","confirmpassword","length","RegisterForm","errorsName","errorsEmail","errorsPassword","useState","setFullname","setEmail","setPassword","setConfirmPassword","onChange","e","target","onClick","preventDefault","opts","fetch","body","JSON","stringify","then","r","json","catch","error","App","registrationFormStatus","setRegistrationFormStatus","loginProps","useSpring","left","opacity","registerProps","loginBtnProps","borderBottom","regBtnProps","button","style","form","action","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dfd8fc5.chunk.js","sourcesContent":["import React from 'react'\nimport './authform.css'\n\nconst LoginForm = () => {\n\n  return (\n    <React.Fragment>\n      <form method=\"post\">\n        <label htmlFor=\"loginemail\">Email</label>\n        <input type=\"email\" id='loginemail' name='email' />\n        <label for='loginpassword'>Password</label>\n        <input type=\"password\" id=\"loginpassword\" name='password' />\n        <input type='submit' value='login' className='submit' />\n      </form>\n    </React.Fragment>\n\n  )\n}\n\nexport default LoginForm\n","\nconst validateRegisterName = ( fullname = '', email = '', password = '', confirmpassword = '')=>{\n    //validating inputs for the register functionality\n    console.log(\"Name\", fullname)\n    let errorsName = {}\n\n    if(!fullname.trim()){\n        errorsName = \"Full name required\"\n    }else{\n        errorsName = \"Valid\"\n    }\n    \n    return errorsName\n    \n}\nexport default validateRegisterName\n\n\n\n","const validateRegisterEmail = (email)=>{\n    //Validation for email content\n    console.log(\"Registering email\", email)\n    let errorsEmail = {}\n    var emailRequirements = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    if(!email.trim()){\n        errorsEmail = \"Email required\"\n    } else if(!emailRequirements.test(email)) {\n        errorsEmail = \"Enter a valid email address\"\n    }else{\n        errorsEmail=\"Valid\"\n    }\nreturn errorsEmail\n}\n\nexport default validateRegisterEmail\n\n\n\n\n\n","const validateRegisterPassword = (password, confirmpassword)=> {\n    \n    let errorsPassword = {}\n    \n        if(!password){\n            errorsPassword = 'Password is required'\n        } else if (password.length < 8){\n            errorsPassword = 'Password needs to be longer than 6 characters'\n        }else{\n            errorsPassword =\"Valid\"\n        }\n    \n        if(!confirmpassword){\n            errorsPassword = 'Confirming password is required'\n        }else if (!password !== confirmpassword){\n            errorsPassword = \"Passwords do not match\"\n        }else{\n            errorsPassword =\"Valid\"\n        }\n    return errorsPassword\n    }\n    \n    export default validateRegisterPassword","import React, { useState } from 'react'\n//import useFormReg from './useFormReg'\nimport validateRegisterName from './validateRegisterName'\nimport './authform.css'\nimport validateRegisterEmail from './validateRegisterEmail'\nimport validateRegisterPassword from './validateRegisterPassword'\n\nconst RegisterForm = () => {\n  //receiving input from the react form and passing the values through tests by \n  //altering the state locally before flask is set up\n  const { errorsName } = validateRegisterName\n  const { errorsEmail } = validateRegisterEmail\n  const { errorsPassword } = validateRegisterPassword\n  const [fullname, setFullname] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmpassword, setConfirmPassword] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n\n    let opts = {\n      'name': fullname,\n      'email': email,\n      'password': password\n    }\n\n\n    fetch('/api/register', {\n      method: 'post',\n      body: JSON.stringify(opts),\n\n    }).then(r => r.json()).catch(error => {\n      console.log(error)\n    })\n\n    validateRegisterName(fullname)\n    validateRegisterEmail(email)\n    validateRegisterPassword(password, confirmpassword)\n  }\n\n  return (\n    <React.Fragment>\n      <form className='form-class'>\n        <label htmlFor=\"fullname\">Full name</label>\n        <input type=\"text\" id=\"fullname\" name='fullname' value={fullname} onChange={e => setFullname(e.target.value)} />\n        {errorsName && <p>{errorsName}</p>}\n        <label htmlFor='email'>Email</label>\n        <input type='text' id=\"email\" name='email' value={email} onChange={e => setEmail(e.target.value)} />\n        {errorsEmail && <p>{errorsEmail}</p>}\n        <label htmlFor='password'>Password</label>\n        <input type=\"password\" id=\"password\" name='password' value={password} onChange={e => setPassword(e.target.value)} />\n        {errorsPassword && <p>{errorsPassword}</p>}\n        <label htmlFor=\"confirmpassword\">Confirm password</label>\n        <input type=\"password\" id=\"confirmpassword\" name='confirmpassword'\n          value={confirmpassword} onChange={e => setConfirmPassword(e.target.value)} />\n        {errorsPassword && <p>{errorsPassword}</p>}\n        <input value=\"Submit\" type='submit' className='submit' onClick={handleSubmit} />\n      </form>\n\n    </React.Fragment>\n  )\n}\n\nexport default RegisterForm\n","import React, { useState } from 'react';\nimport './Components/Auth/login.css';\nimport LoginForm from './Components/Auth/LoginForm';\nimport RegisterForm from './Components/Auth/RegisterForm';\nimport { useSpring, animated } from 'react-spring';\n\n\n\nconst App = () => {\n  // State controller to toggle between login form and registration form\n  const [registrationFormStatus, setRegistrationFormStatus] = useState(false);\n\n  //Props that change teh opacity and position when the form boolean value changes in the state\n  const loginProps = useSpring({\n\n    left: registrationFormStatus ? -430 : 0,\n    opacity: registrationFormStatus ? 0 : 1\n  })\n\n  const registerProps = useSpring({\n    left: registrationFormStatus ? 0 : 430,\n    opacity: registrationFormStatus ? 1 : 0\n  })\n\n  //Toggle between the forms by making the form that is not in use transparent\n  const loginBtnProps = useSpring({ borderBottom: registrationFormStatus ? 'solid 0px transparent' : 'solid 2px #ffffff' })\n  const regBtnProps = useSpring({ borderBottom: registrationFormStatus ? 'solid 2px #ffffff' : 'solid 0px transparent' })\n  //Toggle between the login and register forms using loginProps and RegisterProps which just move the elements aside\n  // and make them transparent when not clicked\n  function registerClicked() { setRegistrationFormStatus(true) }\n  function loginClicked() { setRegistrationFormStatus(false) }\n\n  return (\n    <div className=\"body\">\n      <div className=\"login-register-wrapper\">\n\n        <div className='nav-buttons'>\n          <animated.button onClick={loginClicked} id=\"loginBtn\" className=\"active\" type='primary' style={loginBtnProps}>Login</animated.button>\n          <animated.button onClick={registerClicked} id=\"registerBtn\" type='primary' style={regBtnProps}>Register</animated.button>\n        </div>\n\n        <div className=\"form-group\">\n          <animated.form action='' id='loginform' style={loginProps}>\n            <LoginForm className=\"loginform\" />\n          </animated.form>\n          <animated.form action='' id='registerform' style={registerProps}>\n            <RegisterForm className=\"registerform\" />\n          </animated.form>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}